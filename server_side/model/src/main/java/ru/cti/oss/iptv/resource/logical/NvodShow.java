// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EntityEmbeddable.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.iptv.resource.logical;

import org.hibernate.annotations.Index;

/**
 * Autogenerated POJO EJB class for NvodShow containing the
 * bulk of the entity implementation.
 *
 * This is autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 *
 *
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "NVOD_SHOW")
@javax.persistence.NamedQueries( {
        @javax.persistence.NamedQuery(name = "NvodShow.findAll", query = "select nvodShow from NvodShow AS nvodShow"),
        @javax.persistence.NamedQuery(name = "NvodShow.findByMovie", query = "select s from NvodShow s join s.mediaAsset.mediaContent c where :movie = c.id"),
        @javax.persistence.NamedQuery(name = "NvodShow.findByTimeFrame", query = "select s from NvodShow s where (s.timeFrame.endTime between :startTime and :endTime) or (s.timeFrame.startTime between :startTime and :endTime) or (s.timeFrame.startTime <= :startTime and  s.timeFrame.endTime >= :endTime) order by s.timeFrame.startTime"),
        @javax.persistence.NamedQuery(name = "NvodShow.findByMovieAndTimeFrame", query = "select s from NvodShow s join s.mediaAsset.mediaContent c where :movie = c.id and ((s.timeFrame.endTime between :startTime and :endTime) or (s.timeFrame.startTime between :startTime and :endTime) or (s.timeFrame.startTime <= :startTime and  s.timeFrame.endTime >= :endTime)) "),
        @javax.persistence.NamedQuery(name = "NvodShow.findMediaStream", query = "select src from NvodShow sh join sh.nvodChannel ch join ch.mediaSources src where sh.id = :showId"),
        @javax.persistence.NamedQuery(name = "NvodShow.findMediaAsset", query = "select mediaAsset from NvodShow nvodShow where nvodShow.id = :showId"),
        @javax.persistence.NamedQuery(name = "NvodShow.findMovieIdByShow", query = "select  mc.id  from NvodShow sh join sh.mediaAsset ast join ast.mediaContent mc where sh.id= :showId"),
        @javax.persistence.NamedQuery(name = "NvodShow.findMovie", query = " select  mc1,sh1  from NvodShow sh1"
                + " join sh1.mediaAsset ast1  join ast1.mediaContent mc1  where  mc1.status='ACTIVE'"
                + " and mc1.rating.level<= :customerRating and (mc1.licenseExpired is null or mc1.licenseExpired >= :now)"
                + " and mc1.id = :movieId  and ((sh1.timeFrame.endTime between :startTime and :endTime) or "
                + " (sh1.timeFrame.startTime between :startTime and :endTime) "
                + " or (sh1.timeFrame.startTime <= :startTime and  sh1.timeFrame.endTime >= :endTime))"
                + " order by sh1.timeFrame.startTime"),
        @javax.persistence.NamedQuery(name = "NvodShow.findShows", query = "select  mc1,sh1 from NvodShow sh1"
                + " join sh1.mediaAsset ast1 join ast1.mediaContent mc1 where  mc1.status='ACTIVE'"
                + " and mc1.rating.level<= :customerRating  and (mc1.licenseExpired is null or mc1.licenseExpired >= :now)"
                + " and sh1.id in (:seancesIds) order by sh1.timeFrame.startTime"),
        
        @javax.persistence.NamedQuery(name = "NvodShow.findPublicMovies", query = "select mc1,sh1 from NvodShow sh1 " +
                																   "join sh1.mediaAsset ast1 " +
                																   "join ast1.mediaContent mc1 " +
                																   "join sh1.nvodChannel ch " +
                																   "left outer join ch.regions regions " +
                																  "where " +
                																   "mc1.status='ACTIVE' and " +
                																   "mc1.rating.level <= :customerRating and " +
                																   "(mc1.licenseExpired is null or mc1.licenseExpired >= :now) and " +
                																   "(" +
                																   	"(sh1.timeFrame.endTime between :startTime and :endTime) or " +
                																   	"(sh1.timeFrame.startTime between :startTime and :endTime) or " +
                																   	"(sh1.timeFrame.startTime <= :startTime and  sh1.timeFrame.endTime >= :endTime)" +
                																   ") and " +
                																   "(regions is null or regions is empty or regions.code in (:region)) and " +
                																   "( " +
                																   		"exists ( " +
                																   			"select ms.id from MediaSource ms " +
                																   			 "left outer join ms.bandwidthRating bwr " +
                																   			"where " +
                																   			 "ms.id = ast1.id and " +
                																   			 "(bwr is null or bwr.level <= :bandwidthRating) and " +
                																   			 "(ms.encryption is null or ms.encryption='NONE' or ms.encryption in (:encryptions)) and " +
                																   			 "(ms.encoding is null or ms.encoding in (:codecs)) and " +
                																   			 "(ms.resolution is null or ms.resolution IN (:resolutions))" +
                																   		")" +
                																   ") " +
                																  " order by mc1.id, sh1.timeFrame.startTime"),
        @javax.persistence.NamedQuery(name = "NvodShow.findShowsByMovieId", query = "select  sh1 from NvodShow sh1"
                + " join sh1.mediaAsset ast1 join ast1.mediaContent mc1 where  mc1.status='ACTIVE'"
                + " and mc1.rating.level<= :customerRating and (mc1.licenseExpired is null or mc1.licenseExpired >= :now)"
                + " and ((sh1.timeFrame.endTime between :startTime and :endTime) or "
                + " (sh1.timeFrame.startTime between :startTime and :endTime) "
                + " or (sh1.timeFrame.startTime <= :startTime and  sh1.timeFrame.endTime >= :endTime)) and mc1.id= :movieId "
                + " order by sh1.timeFrame.startTime"),
        
       @javax.persistence.NamedQuery(name = "NvodShow.findMoviesShowsByMoviesIds", 
        		query = "SELECT  m , sh FROM NvodShow sh " +
        				"INNER JOIN sh.mediaAsset asset " +
        				"INNER JOIN asset.mediaContent m " +
        				"WHERE m.id in ( :ids ) " +
        				"AND ( " +
        				"     (sh.timeFrame.endTime BETWEEN :startTime AND :endTime) " +
        				"     OR (sh.timeFrame.startTime BETWEEN :startTime AND :endTime) " +
        				"     OR (sh.timeFrame.startTime <= :startTime AND  sh.timeFrame.endTime >= :endTime) " +
        				"   ) "+
                		"ORDER BY sh.timeFrame.startTime ASC")

})
public class NvodShow implements java.io.Serializable, Comparable < NvodShow >
{
    
    private static final long serialVersionUID = 2566820151148684164L;
    
    // ----------- Attribute Definitions ------------
    
    private java.lang.String name;
    private java.util.Map < java.util.Locale, java.lang.String > i18nName;
    private ru.cti.oss.cbe.datatypes.TimePeriod timeFrame = new ru.cti.oss.cbe.datatypes.TimePeriod();
    private ru.cti.oss.iptv.resource.logical.NvodShowStatus status;
    private java.lang.Long id;
    
    // --------- Relationship Definitions -----------
    
    private ru.cti.oss.iptv.resource.logical.NvodChannel nvodChannel;
    private ru.cti.oss.iptv.resource.logical.MediaAsset mediaAsset;
    private java.util.Set < ru.cti.oss.iptv.resource.physical.VideoServer > videoservers = new java.util.TreeSet < ru.cti.oss.iptv.resource.physical.VideoServer >();
    
    // ---- Manageable Display Attributes (Transient) -----
    
    // --------------- Constructors -----------------
    
    /**
     * Default empty constructor
     */
    public NvodShow() {
    }
    
    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by
     * the parameters.
     *
     * @param name Value for the name property
     * @param timeFrame Value for the timeFrame property
     * @param status Value for the status property
     */
    public NvodShow(java.lang.String name, ru.cti.oss.cbe.datatypes.TimePeriod timeFrame,
            ru.cti.oss.iptv.resource.logical.NvodShowStatus status) {
        setName(name);
        setTimeFrame(timeFrame);
        setStatus(status);
    }
    
    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param name Value for the name property
     * @param timeFrame Value for the timeFrame property
     * @param status Value for the status property
     * @param nvodChannel Value for the nvodChannel relation
     * @param mediaAsset Value for the mediaAsset relation
     * @param videoservers Value for the videoservers relation
     */
    public NvodShow(java.lang.String name, ru.cti.oss.cbe.datatypes.TimePeriod timeFrame,
            ru.cti.oss.iptv.resource.logical.NvodShowStatus status, ru.cti.oss.iptv.resource.logical.NvodChannel nvodChannel,
            ru.cti.oss.iptv.resource.logical.MediaAsset mediaAsset,
            java.util.Set < ru.cti.oss.iptv.resource.physical.VideoServer > videoservers) {
        setName(name);
        setTimeFrame(timeFrame);
        setStatus(status);
        
        setNvodChannel(nvodChannel);
        setMediaAsset(mediaAsset);
        setVideoservers(videoservers);
    }
    
    // -------- Attribute Accessors ----------
    
    /**
     * Get the name property.
     *
     * @return java.lang.String The value of name
     */
    @javax.persistence.Column(name = "NAME", nullable = false, insertable = true, updatable = true)
    @Index(name = "name_index")
    public java.lang.String getName() {
        return name;
    }
    
    /**
     * Set the name property.
     * @param value the new value
     */
    public void setName(java.lang.String value) {
        this.name = value;
    }
    
    @org.hibernate.annotations.CollectionOfElements
    @org.hibernate.annotations.MapKeyManyToMany
    @javax.persistence.JoinTable(name = "nvod_show_i18n_name", joinColumns = { @javax.persistence.JoinColumn(name = "nvod_show_id", nullable = false) })
    public java.util.Map < java.util.Locale, java.lang.String > getI18nName() {
        return i18nName;
    }
    
    public void setI18nName(java.util.Map < java.util.Locale, java.lang.String > i18nName) {
        this.i18nName = i18nName;
    }
    
    /**
     * Get the timeFrame property.
     *
     * @return ru.cti.oss.cbe.datatypes.TimePeriod The value of timeFrame
     */
    @javax.persistence.Embedded
    @javax.persistence.AttributeOverrides( {
            @javax.persistence.AttributeOverride(name = "startTime", column = @javax.persistence.Column(name = "TIME_FRAME_START_TIME", insertable = true, updatable = true)),
            @javax.persistence.AttributeOverride(name = "endTime", column = @javax.persistence.Column(name = "TIME_FRAME_END_TIME", insertable = true, updatable = true)) })
    public ru.cti.oss.cbe.datatypes.TimePeriod getTimeFrame() {
        return timeFrame;
    }
    
    /**
     * Set the timeFrame property.
     * @param value the new value
     */
    public void setTimeFrame(ru.cti.oss.cbe.datatypes.TimePeriod value) {
        this.timeFrame = value;
    }
    
    /**
     * Get the status property.
     *
     * @return ru.cti.oss.iptv.resource.logical.NvodShowStatus The value of status
     */
    @javax.persistence.Column(name = "STATUS", insertable = true, updatable = true)
    @javax.persistence.Enumerated(javax.persistence.EnumType.STRING)
    @Index(name = "status_index")
    public ru.cti.oss.iptv.resource.logical.NvodShowStatus getStatus() {
        return status;
    }
    
    /**
     * Set the status property.
     * @param value the new value
     */
    public void setStatus(ru.cti.oss.iptv.resource.logical.NvodShowStatus value) {
        this.status = value;
    }
    
    /**
     * Get the id property.
     *
     * @return java.lang.Long The value of id
     */
    @javax.persistence.Id
    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)
    @javax.persistence.Column(name = "ID", nullable = false, insertable = true, updatable = true)
    @Index(name = "id_index")
    public java.lang.Long getId() {
        return id;
    }
    
    /**
     * Set the id property.
     * @param value the new value
     */
    public void setId(java.lang.Long value) {
        this.id = value;
    }
    
    // ------------- Relations ------------------
    
    /**
     * Get the nvodChannel
     *
     * @return ru.cti.oss.iptv.resource.logical.NvodChannel
     */
    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.LAZY)
    @javax.persistence.JoinColumn(name = "NVODCHANNEL")
    public ru.cti.oss.iptv.resource.logical.NvodChannel getNvodChannel() {
        return this.nvodChannel;
    }
    
    /**
     * Set the nvodChannel
     *
     * @param nvodChannel
     */
    public void setNvodChannel(ru.cti.oss.iptv.resource.logical.NvodChannel nvodChannel) {
        this.nvodChannel = nvodChannel;
    }
    
    /**
     * Get the mediaAsset
     *
     * @return ru.cti.oss.iptv.resource.logical.MediaAsset
     */
    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.LAZY)
    @javax.persistence.JoinColumn(name = "MEDIAASSET")
    public ru.cti.oss.iptv.resource.logical.MediaAsset getMediaAsset() {
        return this.mediaAsset;
    }
    
    /**
     * Set the mediaAsset
     *
     * @param mediaAsset
     */
    public void setMediaAsset(ru.cti.oss.iptv.resource.logical.MediaAsset mediaAsset) {
        this.mediaAsset = mediaAsset;
    }
    
    /**
     * Get the videoservers Collection
     *
     * @return java.util.Set<ru.cti.oss.iptv.resource.physical.VideoServer>
     */
    @javax.persistence.ManyToMany(fetch = javax.persistence.FetchType.LAZY)
    @javax.persistence.JoinTable(name = "NVOD_SHOWS2VIDEOSERVERS", joinColumns = { @javax.persistence.JoinColumn(name = "NVOD_SHOW_IDC", referencedColumnName = "ID") }, inverseJoinColumns = { @javax.persistence.JoinColumn(name = "VIDEO_SERVER_IDC", referencedColumnName = "ID") })
    public java.util.Set < ru.cti.oss.iptv.resource.physical.VideoServer > getVideoservers() {
        return this.videoservers;
    }
    
    /**
     * Set the videoservers
     *
     * @param videoservers
     */
    public void setVideoservers(java.util.Set < ru.cti.oss.iptv.resource.physical.VideoServer > videoservers) {
        this.videoservers = videoservers;
    }
    
    /**
     * Add VideoServer
     *
     * @param videoServer
     */
    
    public void addToVideoservers(ru.cti.oss.iptv.resource.physical.VideoServer videoServer) {
        if (videoServer == null)
            return;
        this.getVideoservers().add(videoServer);
    }
    
    /**
     * Remove VideoServer
     *
     * @param videoServer
     */
    
    public void removeFromVideoservers(ru.cti.oss.iptv.resource.physical.VideoServer videoServer) {
        if (videoServer == null)
            return;
        this.getVideoservers().remove(videoServer);
    }
    
    // -------- Common Methods -----------
    
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof NvodShow)) {
            return false;
        }
        final NvodShow that = (NvodShow) object;
        if (this.getId() == null || that.getId() == null || !this.getId().equals(that.getId())) {
            return false;
        }
        return true;
    }
    
    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode() {
        int hashCode = 0;
        hashCode = 29 * hashCode + (getId() == null ? 0 : getId().hashCode());
        
        return hashCode;
    }
    
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("NvodShow(=");
        sb.append("name: ");
        sb.append(getName());
        sb.append(", timeFrame: ");
        if (getTimeFrame() != null)
            sb.append(getTimeFrame().toString());
        else
            sb.append("null");
        sb.append(", status: ");
        sb.append(getStatus());
        sb.append(", id: ");
        sb.append(getId());
        sb.append(")");
        return sb.toString();
    }
    
    /**
     * @see java.lang.Comparable#compareTo(T)
     */
    public int compareTo(NvodShow o) {
        int cmp = 0;
        if (this.getId() != null) {
            cmp = this.getId().compareTo(o.getId());
        } else {
            if (this.getName() != null) {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(o.getName()));
            }
            if (this.getStatus() != null) {
                cmp = (cmp != 0 ? cmp : this.getStatus().compareTo(o.getStatus()));
            }
        }
        return cmp;
    }
}