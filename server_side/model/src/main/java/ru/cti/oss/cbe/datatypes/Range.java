// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EmbeddedValue.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.cbe.datatypes;

/**
 * 
 *
 * Migrated from using @javax.persistence.Embeddable annotation to mapping in orm.xml
 * Still use the attribute annotations
 */
public class Range
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -5471051887562849533L;

    /**
     * Creates a new instance of {@link Range}
     * taking all properties.
     */
    public static Range newInstance(ru.cti.oss.cbe.datatypes.Quantity lowerValue,ru.cti.oss.cbe.datatypes.Quantity upperValue)
    {
        RangeImpl object = new RangeImpl();
        object.setLowerValue(lowerValue);
        object.setUpperValue(upperValue);
        object.initialize();
        return object;
    }

    /**
     * Creates a new instance from other Range instance.
     */
    public static Range newInstance(Range otherObject)
    {
        if (otherObject != null)
        {
            return newInstance(otherObject.getLowerValue(),otherObject.getUpperValue());
        }
        return null;
    }

    public Range()
    {
    }

    /**
     * Hook for initializing the object in the subclass
     */
    protected void initialize()
    {
    }

    private ru.cti.oss.cbe.datatypes.Quantity lowerValue;

    /**
     * 
     */
    @javax.persistence.Column(name = "LOWER_VALUE", nullable = false, insertable = true, updatable = true)
    public ru.cti.oss.cbe.datatypes.Quantity getLowerValue()
    {
        return this.lowerValue;
    }

    public void setLowerValue(ru.cti.oss.cbe.datatypes.Quantity lowerValue)
    {
        this.lowerValue = lowerValue;
    }

    private ru.cti.oss.cbe.datatypes.Quantity upperValue;

    /**
     * 
     */
    @javax.persistence.Column(name = "UPPER_VALUE", nullable = false, insertable = true, updatable = true)
    public ru.cti.oss.cbe.datatypes.Quantity getUpperValue()
    {
        return this.upperValue;
    }

    public void setUpperValue(ru.cti.oss.cbe.datatypes.Quantity upperValue)
    {
        this.upperValue = upperValue;
    }

    /**
     * Indicates if the argument is of the same type and all values are equal.
     */
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Range))
        {
            return false;
        }
        final Range that = (Range)object;
        if (this.getLowerValue() == null || that.getLowerValue() == null || !this.getLowerValue().equals(that.getLowerValue()))
        {
            return false;
        }
        if (this.getUpperValue() == null || that.getUpperValue() == null || !this.getUpperValue().equals(that.getUpperValue()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (getLowerValue() == null ? 0 : getLowerValue().hashCode());
        hashCode = 29 * hashCode + (getUpperValue() == null ? 0 : getUpperValue().hashCode());

        return hashCode;
    }

    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Range(=");
        sb.append("lowerValue: ");
		if (getLowerValue()!=null)
		    sb.append(getLowerValue().toString());
	    else
		    sb.append("null");
        sb.append(", upperValue: ");
		if (getUpperValue()!=null)
		    sb.append(getUpperValue().toString());
	    else
		    sb.append("null");
        sb.append(")");
        return sb.toString();
    }
}