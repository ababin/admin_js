// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EntityEmbeddable.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.iptv.resource.logical;

import org.hibernate.annotations.Index;
import org.springframework.transaction.annotation.Transactional;

/**
 * Autogenerated POJO EJB class for MediaContent containing the
 * bulk of the entity implementation.
 *
 * This is autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 * 
 *
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "MEDIA_CONTENT")
@org.hibernate.annotations.BatchSize(size = 20)
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)
@javax.persistence.NamedQuery(name = "MediaContent.findAll", query = "select mediaContent from MediaContent AS mediaContent")
public class MediaContent extends ru.cti.oss.cbe.resource.LogicalResource implements java.io.Serializable
{
    
    private static final long serialVersionUID = -6211909431995777329L;
    
    // --------- Relationship Definitions -----------
    
    private java.util.Set < ru.cti.oss.iptv.common.Category > categories = new java.util.TreeSet < ru.cti.oss.iptv.common.Category >();
    private java.util.Set < ru.cti.oss.iptv.resource.logical.MediaSource > mediaSources = new java.util.TreeSet < ru.cti.oss.iptv.resource.logical.MediaSource >();
    private ru.cti.oss.iptv.common.Rating rating;
    private java.util.Set < Region > regions;
    
    // ---- Manageable Display Attributes (Transient) -----
    
    // --------------- Constructors -----------------
    
    /**
     * Default empty constructor
     */
    public MediaContent() {
    }
    
    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by
     * the parameters.
     *
     * @param name Value for the name property
     * @param description Value for the description property
     * @param status Value for the status property
     */
    public MediaContent(final java.lang.String name, final java.lang.String description,
            final ru.cti.oss.cbe.datatypes.LifeCycleState status) {
        super(name, description, status);
        this.setName(name);
        this.setDescription(description);
        this.setStatus(status);
    }
    
    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param name Value for the name property
     * @param description Value for the description property
     * @param status Value for the status property
     * @param categories Value for the categories relation
     * @param mediaSource Value for the mediaSource relation
     * @param rating Value for the rating relation
     */
    
    public MediaContent(final java.lang.String name, final java.lang.String description,
            final ru.cti.oss.cbe.datatypes.LifeCycleState status, final java.util.Set < ru.cti.oss.iptv.common.Category > categories,
            final java.util.Set < ru.cti.oss.iptv.resource.logical.MediaSource > mediaSources, final ru.cti.oss.iptv.common.Rating rating) {
        this.setName(name);
        this.setDescription(description);
        this.setStatus(status);
        
        this.setCategories(categories);
        this.setMediaSources(mediaSources);
        this.setRating(rating);
    }
    
    /**
     * Add Category
     *
     * @param category
     */
    
    public void addToCategories(final ru.cti.oss.iptv.common.Category category) {
        if (category == null) {
            return;
        }
        this.getCategories().add(category);
    }
    
    public void addToMediaSources(final ru.cti.oss.iptv.resource.logical.MediaSource mediaSource) {
        if (mediaSource != null) {
            this.getMediaSources().add(mediaSource);
            mediaSource.setMediaContent(this);
        }
    }
    
    // ------------- Relations ------------------
    
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    @Override
    public boolean equals(final Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof MediaContent)) {
            return false;
        }
        final MediaContent that = (MediaContent) object;
        if ((this.getId() == null) || (that.getId() == null) || !this.getId().equals(that.getId())) {
            return false;
        }
        return true;
    }
    
    /**
     * Get the categories Collection
     *
     * @return java.util.Set<ru.cti.oss.iptv.common.Category>
     */
    @javax.persistence.ManyToMany(fetch = javax.persistence.FetchType.LAZY)
    @javax.persistence.JoinTable(name = "CATEGORIES2MEDIA_CONTENTS", joinColumns = { @javax.persistence.JoinColumn(name = "MEDIA_CONTENT_IDC", referencedColumnName = "ID") }, inverseJoinColumns = { @javax.persistence.JoinColumn(name = "CATEGORY_IDC", referencedColumnName = "ID") })
    public java.util.Set < ru.cti.oss.iptv.common.Category > getCategories() {
        return this.categories;
    }
    
    /**
     * Method for back compatibility after change reference from one-to-one to one-to-many
     * All present classes may use this method without painfully and serious changes. All new classes must use collection.
     * @return default MediaSource for MediaContent
     */
    @Deprecated
    @javax.persistence.Transient
    public ru.cti.oss.iptv.resource.logical.MediaSource getMediaSource() {
        throw new UnsupportedOperationException("Invoked deprecated method in parent class. This method available only in subclasses");
    }
    
    @javax.persistence.OneToMany(fetch = javax.persistence.FetchType.LAZY, mappedBy = "mediaContent")
    public java.util.Set < ru.cti.oss.iptv.resource.logical.MediaSource > getMediaSources() {
        return this.mediaSources;
    }
    
    /**
     * Get the rating
     *
     * @return ru.cti.oss.iptv.common.Rating
     */
    @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY)
    @javax.persistence.JoinColumn(name = "RATING")
    @Index(name = "rating_index")
    public ru.cti.oss.iptv.common.Rating getRating() {
        return this.rating;
    }
    
    @javax.persistence.ManyToMany(fetch = javax.persistence.FetchType.LAZY)
    //@JoinTable(name = "MEDIA_CONTENT2REGION", joinColumns = @javax.persistence.JoinColumn(name = "media_content_id"), inverseJoinColumns = @javax.persistence.JoinColumn(name = "region_id"))
    @javax.persistence.JoinTable(name = "MEDIA_CONTENT2REGION", joinColumns = { @javax.persistence.JoinColumn(name = "media_content_id", referencedColumnName = "ID") }, inverseJoinColumns = { @javax.persistence.JoinColumn(name = "region_id", referencedColumnName = "ID") })
    public java.util.Set < Region > getRegions() {
        return this.regions;
    }
    
    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    @Override
    public int hashCode() {
        int hashCode = super.hashCode();
        hashCode = 29 * hashCode + (this.getId() == null ? 0 : this.getId().hashCode());
        
        return hashCode;
    }
    
    /**
     * Remove Category
     *
     * @param category
     */
    
    public void removeFromCategories(final ru.cti.oss.iptv.common.Category category) {
        if (category == null) {
            return;
        }
        this.getCategories().remove(category);
    }
    
    public void removeFromMediaSources(final ru.cti.oss.iptv.resource.logical.MediaSource mediaSource) {
        if (mediaSource != null) {
            this.getMediaSources().remove(mediaSource);
            mediaSource.setMediaContent(null);
        }
    }
    
    /**
     * Set the categories
     *
     * @param categories
     */
    public void setCategories(final java.util.Set < ru.cti.oss.iptv.common.Category > categories) {
        this.categories = categories;
    }
    
    /**
     * Method for back compatibility after change reference from one-to-one to one-to-many
     * All present classes may use this method without painfully and serious changes. All new classes must use collection.
     * @param mediaSource
     */
    @Deprecated
    @Transactional
    public void setMediaSource(final ru.cti.oss.iptv.resource.logical.MediaSource mediaSource) {
        if (mediaSource != null) {
            this.getMediaSources().add(mediaSource);
            mediaSource.setMediaContent(this);
        }
    }
    
    public void setMediaSources(final java.util.Set < ru.cti.oss.iptv.resource.logical.MediaSource > mediaSources) {
        this.mediaSources = mediaSources;
    }
    
    // -------- Common Methods -----------
    
    /**
     * Set the rating
     *
     * @param rating
     */
    public void setRating(final ru.cti.oss.iptv.common.Rating rating) {
        this.rating = rating;
    }
    
    public void setRegions(final java.util.Set < Region > regions) {
        this.regions = regions;
    }
    
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    @Override
    public String toString() {
        return super.toString();
    }
    
}