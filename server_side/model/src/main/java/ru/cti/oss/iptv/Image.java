// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EmbeddedValue.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.iptv;

/**
 * 
 *
 * Migrated from using @javax.persistence.Embeddable annotation to mapping in orm.xml
 * Still use the attribute annotations
 */
public class Image
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -5504020244387111364L;

    /**
     * Creates a new instance of {@link Image}
     * taking all properties.
     */
    public static Image newInstance(java.lang.Integer width,java.lang.Integer height,java.lang.Integer size,java.lang.String contentType,byte[] data)
    {
        Image object = new Image();
        object.setWidth(width);
        object.setHeight(height);
        object.setSize(size);
        object.setContentType(contentType);
        object.setData(data);
        object.initialize();
        return object;
    }

    /**
     * Creates a new instance from other Image instance.
     */
    public static Image newInstance(Image otherObject)
    {
        if (otherObject != null)
        {
            return newInstance(otherObject.getWidth(),otherObject.getHeight(),otherObject.getSize(),otherObject.getContentType(),otherObject.getData());
        }
        return null;
    }

    public Image()
    {
    }

    /**
     * Hook for initializing the object in the subclass
     */
    protected void initialize()
    {
    }

    private java.lang.Integer width;

    /**
     * 
     */
    @javax.persistence.Column(name = "WIDTH", insertable = true, updatable = true)
    public java.lang.Integer getWidth()
    {
        return this.width;
    }

    public void setWidth(java.lang.Integer width)
    {
        this.width = width;
    }

    private java.lang.Integer height;

    /**
     * 
     */
    @javax.persistence.Column(name = "HEIGHT", insertable = true, updatable = true)
    public java.lang.Integer getHeight()
    {
        return this.height;
    }

    public void setHeight(java.lang.Integer height)
    {
        this.height = height;
    }

    private java.lang.Integer size;

    /**
     * 
     */
    @javax.persistence.Column(name = "SIZE", insertable = true, updatable = true)
    public java.lang.Integer getSize()
    {
        return this.size;
    }

    public void setSize(java.lang.Integer size)
    {
        this.size = size;
    }

    private java.lang.String contentType;

    /**
     * 
     */
    @javax.persistence.Column(name = "CONTENT_TYPE", insertable = true, updatable = true)
    public java.lang.String getContentType()
    {
        return this.contentType;
    }

    public void setContentType(java.lang.String contentType)
    {
        this.contentType = contentType;
    }

    private byte[] data;

    /**
     * 
     */
    @javax.persistence.Lob
    @javax.persistence.Column(name = "DATA", insertable = true, updatable = true)
    public byte[] getData()
    {
        return this.data;
    }

    public void setData(byte[] data)
    {
        this.data = data;
    }

    /**
     * Indicates if the argument is of the same type and all values are equal.
     */
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Image))
        {
            return false;
        }
        final Image that = (Image)object;
        if (this.getWidth() == null || that.getWidth() == null || !this.getWidth().equals(that.getWidth()))
        {
            return false;
        }
        if (this.getHeight() == null || that.getHeight() == null || !this.getHeight().equals(that.getHeight()))
        {
            return false;
        }
        if (this.getSize() == null || that.getSize() == null || !this.getSize().equals(that.getSize()))
        {
            return false;
        }
        if (this.getContentType() == null || that.getContentType() == null || !this.getContentType().equals(that.getContentType()))
        {
            return false;
        }
        if (this.getData() == null || that.getData() == null || !this.getData().equals(that.getData()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (getWidth() == null ? 0 : getWidth().hashCode());
        hashCode = 29 * hashCode + (getHeight() == null ? 0 : getHeight().hashCode());
        hashCode = 29 * hashCode + (getSize() == null ? 0 : getSize().hashCode());
        hashCode = 29 * hashCode + (getContentType() == null ? 0 : getContentType().hashCode());
        hashCode = 29 * hashCode + (getData() == null ? 0 : getData().hashCode());

        return hashCode;
    }

    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Image(=");
        sb.append("width: ");
        sb.append(getWidth());
        sb.append(", height: ");
        sb.append(getHeight());
        sb.append(", size: ");
        sb.append(getSize());
        sb.append(", contentType: ");
        sb.append(getContentType());
        sb.append(")");
        return sb.toString();
    }
}