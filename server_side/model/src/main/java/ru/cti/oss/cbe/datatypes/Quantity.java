// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EmbeddedValue.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.cbe.datatypes;

/**
 * 
 *
 * Migrated from using @javax.persistence.Embeddable annotation to mapping in orm.xml
 * Still use the attribute annotations
 */
public class Quantity
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -8773148130636941535L;

    /**
     * Creates a new instance of {@link Quantity}
     * taking all properties.
     */
    public static Quantity newInstance(java.lang.Integer amount,java.lang.String units)
    {
        QuantityImpl object = new QuantityImpl();
        object.setAmount(amount);
        object.setUnits(units);
        object.initialize();
        return object;
    }

    /**
     * Creates a new instance from other Quantity instance.
     */
    public static Quantity newInstance(Quantity otherObject)
    {
        if (otherObject != null)
        {
            return newInstance(otherObject.getAmount(),otherObject.getUnits());
        }
        return null;
    }

    public Quantity()
    {
    }

    /**
     * Hook for initializing the object in the subclass
     */
    protected void initialize()
    {
    }

    private java.lang.Integer amount;

    /**
     * 
     */
    @javax.persistence.Column(name = "AMOUNT", nullable = false, insertable = true, updatable = true)
    public java.lang.Integer getAmount()
    {
        return this.amount;
    }

    public void setAmount(java.lang.Integer amount)
    {
        this.amount = amount;
    }

    private java.lang.String units;

    /**
     * 
     */
    @javax.persistence.Column(name = "UNITS", nullable = false, insertable = true, updatable = true)
    public java.lang.String getUnits()
    {
        return this.units;
    }

    public void setUnits(java.lang.String units)
    {
        this.units = units;
    }

    /**
     * Indicates if the argument is of the same type and all values are equal.
     */
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Quantity))
        {
            return false;
        }
        final Quantity that = (Quantity)object;
        if (this.getAmount() == null || that.getAmount() == null || !this.getAmount().equals(that.getAmount()))
        {
            return false;
        }
        if (this.getUnits() == null || that.getUnits() == null || !this.getUnits().equals(that.getUnits()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (getAmount() == null ? 0 : getAmount().hashCode());
        hashCode = 29 * hashCode + (getUnits() == null ? 0 : getUnits().hashCode());

        return hashCode;
    }

    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Quantity(=");
        sb.append("amount: ");
        sb.append(getAmount());
        sb.append(", units: ");
        sb.append(getUnits());
        sb.append(")");
        return sb.toString();
    }
}