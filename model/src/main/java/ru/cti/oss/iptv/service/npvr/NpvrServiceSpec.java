// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EntityEmbeddable.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.iptv.service.npvr;

import javax.persistence.NamedQuery;

/**
 * Autogenerated POJO EJB class for NpvrServiceSpec containing the
 * bulk of the entity implementation.
 *
 * This is autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 * 
 *
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "NPVR_SERVICE_SPEC")
@javax.persistence.NamedQueries( {
        @NamedQuery(name = "NpvrServiceSpec.findAll", query = "select npvrServiceSpec from NpvrServiceSpec AS npvrServiceSpec"),
        @NamedQuery(name = "NpvrServiceSpec.findBySubsription", query = "select channel from NpvrServiceSpec npvr"
                + " join npvr.npvrChannels as channel  where npvr.externalId in (:availServices))"),
        @NamedQuery(name = "NpvrServiceSpec.getAvailableTime", query = "select sum(npvr.recordingLimit) from NpvrServiceSpec npvr where npvr.externalId in  (:availServices)")

})
public class NpvrServiceSpec extends ru.cti.oss.cbe.service.ServiceSpecification implements java.io.Serializable
{
    
    private static final long serialVersionUID = 8495183236123164586L;
    
    // ----------- Attribute Definitions ------------
    
    private java.lang.Long recordingLimit;
    
    // --------- Relationship Definitions -----------
    
    private java.util.Set < ru.cti.oss.iptv.resource.logical.NpvrChannel > npvrChannels = new java.util.TreeSet < ru.cti.oss.iptv.resource.logical.NpvrChannel >();
    
    // ---- Manageable Display Attributes (Transient) -----
    
    // --------------- Constructors -----------------
    
    /**
     * Default empty constructor
     */
    public NpvrServiceSpec() {
    }
    
    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by
     * the parameters.
     *
     * @param name Value for the name property
     * @param description Value for the description property
     * @param status Value for the status property
     * @param externalId Value for the externalId property
     * @param logo Value for the logo property
     * @param recordingLimit Value for the recordingLimit property
     */
    public NpvrServiceSpec(java.lang.String name, java.lang.String description, ru.cti.oss.cbe.service.ServiceStatus status,
            java.lang.Long externalId, ru.cti.oss.iptv.Image logo, java.lang.Long recordingLimit) {
        super(name, description, status, externalId, logo);
        setName(name);
        setDescription(description);
        setStatus(status);
        setExternalId(externalId);
        setLogo(logo);
        setRecordingLimit(recordingLimit);
    }
    
    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param name Value for the name property
     * @param description Value for the description property
     * @param status Value for the status property
     * @param externalId Value for the externalId property
     * @param logo Value for the logo property
     * @param recordingLimit Value for the recordingLimit property
     * @param npvrChannels Value for the npvrChannels relation
     */
    public NpvrServiceSpec(java.lang.String name, java.lang.String description, ru.cti.oss.cbe.service.ServiceStatus status,
            java.lang.Long externalId, ru.cti.oss.iptv.Image logo, java.lang.Long recordingLimit,
            java.util.Set < ru.cti.oss.iptv.resource.logical.NpvrChannel > npvrChannels) {
        setName(name);
        setDescription(description);
        setStatus(status);
        setExternalId(externalId);
        setLogo(logo);
        setRecordingLimit(recordingLimit);
        
        setNpvrChannels(npvrChannels);
    }
    
    // -------- Attribute Accessors ----------
    
    /**
     * Get the recordingLimit property.
     * 
     * @return java.lang.Long The value of recordingLimit
     */
    @javax.persistence.Column(name = "RECORDING_LIMIT", nullable = false, insertable = true, updatable = true)
    public java.lang.Long getRecordingLimit() {
        return recordingLimit;
    }
    
    /**
     * Set the recordingLimit property.
     * @param value the new value
     */
    public void setRecordingLimit(java.lang.Long value) {
        this.recordingLimit = value;
    }
    
    // ------------- Relations ------------------
    
    /**
     * Get the npvrChannels Collection
     *
     * @return java.util.Set<ru.cti.oss.iptv.resource.logical.NpvrChannel>
     */
    @javax.persistence.ManyToMany(fetch = javax.persistence.FetchType.LAZY)
    @javax.persistence.JoinTable(name = "NPVR_CHANNELS2NPVR_SERVICE_SPE", joinColumns = { @javax.persistence.JoinColumn(name = "NPVR_SERVICE_SPEC_IDC", referencedColumnName = "ID") }, inverseJoinColumns = { @javax.persistence.JoinColumn(name = "NPVR_CHANNEL_IDC", referencedColumnName = "ID") })
    public java.util.Set < ru.cti.oss.iptv.resource.logical.NpvrChannel > getNpvrChannels() {
        return this.npvrChannels;
    }
    
    /**
     * Set the npvrChannels
     *
     * @param npvrChannels
     */
    public void setNpvrChannels(java.util.Set < ru.cti.oss.iptv.resource.logical.NpvrChannel > npvrChannels) {
        this.npvrChannels = npvrChannels;
    }
    
    /**
     * Add NpvrChannel
     *
     * @param npvrChannel
     */
    
    public void addToNpvrChannels(ru.cti.oss.iptv.resource.logical.NpvrChannel npvrChannel) {
        if (npvrChannel == null)
            return;
        this.getNpvrChannels().add(npvrChannel);
    }
    
    /**
     * Remove NpvrChannel
     *
     * @param npvrChannel
     */
    
    public void removeFromNpvrChannels(ru.cti.oss.iptv.resource.logical.NpvrChannel npvrChannel) {
        if (npvrChannel == null)
            return;
        this.getNpvrChannels().remove(npvrChannel);
    }
    
    /*
     * (non-Javadoc)
     * @see ru.cti.oss.cbe.service.ServiceSpecification#countTypeSpecs()
     */
    @Override
    public int countTypeSpecs() {
    	if (npvrChannels != null) {
    		return npvrChannels.size();
    	}
    	return 0;
    }
    
    // -------- Common Methods -----------
    
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof NpvrServiceSpec)) {
            return false;
        }
        final NpvrServiceSpec that = (NpvrServiceSpec) object;
        if (this.getId() == null || that.getId() == null || !this.getId().equals(that.getId())) {
            return false;
        }
        return true;
    }
    
    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode() {
        int hashCode = super.hashCode();
        hashCode = 29 * hashCode + (getId() == null ? 0 : getId().hashCode());
        
        return hashCode;
    }
    
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("NpvrServiceSpec(=");
        sb.append(super.toString());
        sb.append("recordingLimit: ");
        sb.append(getRecordingLimit());
        sb.append(")");
        return sb.toString();
    }
    
}