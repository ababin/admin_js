// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EntityEmbeddable.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.security;

/**
 * Autogenerated POJO EJB class for SystemUserProperty containing the
 * bulk of the entity implementation.
 *
 * This is autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 * 
 *
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "SYSTEM_USER_PROPERTY")
@javax.persistence.NamedQuery(name = "SystemUserProperty.findAll", query = "select systemUserProperty from SystemUserProperty AS systemUserProperty")
public class SystemUserProperty
    implements java.io.Serializable, Comparable<SystemUserProperty>
{

    private static final long serialVersionUID = -8320741166839529090L;

    // ----------- Attribute Definitions ------------

    private java.lang.String key;
    private java.lang.String value;
    private java.lang.Long id;


    // --------- Relationship Definitions -----------

    private ru.cti.oss.security.SystemUser systemUser;

    // ---- Manageable Display Attributes (Transient) -----


    // --------------- Constructors -----------------

    /**
     * Default empty constructor
     */
    public SystemUserProperty() {}

    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by
     * the parameters.
     *
     * @param key Value for the key property
     * @param value Value for the value property
     */
    public SystemUserProperty(java.lang.String key, java.lang.String value)
    {
        setKey(key);
        setValue(value);
    }

    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param key Value for the key property
     * @param value Value for the value property
     * @param systemUser Value for the systemUser relation
     */
    public SystemUserProperty(java.lang.String key, java.lang.String value, ru.cti.oss.security.SystemUser systemUser)
    {
        setKey(key);
        setValue(value);

        setSystemUser(systemUser);
    }


    // -------- Attribute Accessors ----------

    /**
     * Get the key property.
     * 
     * @return java.lang.String The value of key
     */
    	@javax.persistence.Column(name = "USER_KEY", nullable = false, insertable = true, updatable = true)
    public java.lang.String getKey()
    {
        return key;
    }

    /**
     * Set the key property.
     * @param value the new value
     */
    public void setKey(java.lang.String value)
    {
        this.key = value;
    }

    /**
     * Get the value property.
     * 
     * @return java.lang.String The value of value
     */
    	@javax.persistence.Column(name = "VALUE", nullable = false, insertable = true, updatable = true)
    public java.lang.String getValue()
    {
        return value;
    }

    /**
     * Set the value property.
     * @param value the new value
     */
    public void setValue(java.lang.String value)
    {
        this.value = value;
    }

    /**
     * Get the id property.
     * 
     * @return java.lang.Long The value of id
     */
    @javax.persistence.Id
    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)
    	@javax.persistence.Column(name = "ID", nullable = false, insertable = true, updatable = true)
    public java.lang.Long getId()
    {
        return id;
    }

    /**
     * Set the id property.
     * @param value the new value
     */
    public void setId(java.lang.Long value)
    {
        this.id = value;
    }


    // ------------- Relations ------------------

    /**
     * Get the systemUser
     *
     * @return ru.cti.oss.security.SystemUser
     */
    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.LAZY)
    @javax.persistence.JoinColumn(name = "SYSTEMUSER")
    public ru.cti.oss.security.SystemUser getSystemUser()
    {
        return this.systemUser;
    }

   /**
    * Set the systemUser
    *
    * @param systemUser
    */
    public void setSystemUser(ru.cti.oss.security.SystemUser systemUser)
    {
        this.systemUser = systemUser;
    }

    // -------- Common Methods -----------

    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof SystemUserProperty))
        {
            return false;
        }
        final SystemUserProperty that = (SystemUserProperty)object;
        if (this.getId() == null || that.getId() == null || !this.getId().equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (getId() == null ? 0 : getId().hashCode());

        return hashCode;
    }

    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("SystemUserProperty(=");
        sb.append("key: ");
        sb.append(getKey());
        sb.append(", value: ");
        sb.append(getValue());
        sb.append(", id: ");
        sb.append(getId());
        sb.append(")");
        return sb.toString();
    }

    /**
     * @see java.lang.Comparable#compareTo(T)
     */
    public int compareTo(SystemUserProperty o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getKey() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getKey().compareTo(o.getKey()));
            }
            if (this.getValue() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getValue().compareTo(o.getValue()));
            }
        }
        return cmp;
    }
}