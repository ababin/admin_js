// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EntityEmbeddable.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.cbe.party;

import javax.persistence.CascadeType;

import org.hibernate.annotations.Index;

/**
 * Autogenerated POJO EJB class for PartyRole containing the
 * bulk of the entity implementation.
 *
 * This is autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 * 
 *
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "PARTY_ROLE")
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)
@javax.persistence.NamedQueries({
	@javax.persistence.NamedQuery(name = "PartyRole.findAll", query = "select partyRole from PartyRole AS partyRole"),
	@javax.persistence.NamedQuery(name = "PartyRole.findByPartyId", query = "select partyRole from PartyRole AS partyRole where partyRole.party.id = :partyId")
})

public class PartyRole implements java.io.Serializable, Comparable < PartyRole >
{
    
    private static final long serialVersionUID = -3888317657445150265L;
    
    // ----------- Attribute Definitions ------------
    
    private java.lang.String name;
    private ru.cti.oss.cbe.datatypes.TimePeriod validFor = new ru.cti.oss.cbe.datatypes.TimePeriod();
    private java.lang.Long id;
    
    // --------- Relationship Definitions -----------
    
    private ru.cti.oss.cbe.party.Party party;
    private java.util.Set < ru.cti.oss.cbe.resource.Resource > ownedResources = new java.util.TreeSet < ru.cti.oss.cbe.resource.Resource >();
    
    // ---- Manageable Display Attributes (Transient) -----
    
    private java.lang.String partyLabel; // Manageable display attribute
    
    // --------------- Constructors -----------------
    
    /**
     * Default empty constructor
     */
    public PartyRole() {
    }
    
    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by
     * the parameters.
     *
     * @param name Value for the name property
     * @param validFor Value for the validFor property
     */
    public PartyRole(java.lang.String name, ru.cti.oss.cbe.datatypes.TimePeriod validFor) {
        setName(name);
        setValidFor(validFor);
    }
    
    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param name Value for the name property
     * @param validFor Value for the validFor property
     * @param party Value for the party relation
     * @param ownedResources Value for the ownedResources relation
     */
    public PartyRole(java.lang.String name, ru.cti.oss.cbe.datatypes.TimePeriod validFor, ru.cti.oss.cbe.party.Party party,
            java.util.Set < ru.cti.oss.cbe.resource.Resource > ownedResources) {
        setName(name);
        setValidFor(validFor);
        
        setParty(party);
        setOwnedResources(ownedResources);
    }
    
    // -------- Attribute Accessors ----------
    
    /**
     * Get the name property.
     * 
     * @return java.lang.String The value of name
     */
    @javax.persistence.Column(name = "NAME", unique = true, nullable = false, insertable = true, updatable = true)
    @Index(name = "name_index")
    public java.lang.String getName() {
        return name;
    }
    
    /**
     * Set the name property.
     * @param value the new value
     */
    public void setName(java.lang.String value) {
        this.name = value;
    }
    
    /**
     * Get the validFor property.
     * 
     * @return ru.cti.oss.cbe.datatypes.TimePeriod The value of validFor
     */
    @javax.persistence.Embedded
    @javax.persistence.AttributeOverrides( {
            @javax.persistence.AttributeOverride(name = "startTime", column = @javax.persistence.Column(name = "VALID_FOR_START_TIME", insertable = true, updatable = true)),
            @javax.persistence.AttributeOverride(name = "endTime", column = @javax.persistence.Column(name = "VALID_FOR_END_TIME", insertable = true, updatable = true)) })
    public ru.cti.oss.cbe.datatypes.TimePeriod getValidFor() {
        return validFor;
    }
    
    /**
     * Set the validFor property.
     * @param value the new value
     */
    public void setValidFor(ru.cti.oss.cbe.datatypes.TimePeriod value) {
        this.validFor = value;
    }
    
    /**
     * Get the id property.
     * 
     * @return java.lang.Long The value of id
     */
    @javax.persistence.Id
    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)
    @javax.persistence.Column(name = "ID", nullable = false, insertable = true, updatable = true)
    @Index(name = "id_index")
    public java.lang.Long getId() {
        return id;
    }
    
    /**
     * Set the id property.
     * @param value the new value
     */
    public void setId(java.lang.Long value) {
        this.id = value;
    }
    
    // ------------- Relations ------------------
    
    /**
     * Get the party
     *
     * @return ru.cti.oss.cbe.party.Party
     */
    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.EAGER)
    @javax.persistence.JoinColumn(name = "PARTY")
    @Index(name = "party_index")
    public ru.cti.oss.cbe.party.Party getParty() {
        return this.party;
    }
    
    /**
     * Set the party
     *
     * @param party
     */
    public void setParty(ru.cti.oss.cbe.party.Party party) {
        this.party = party;
    }
    
    /**
     * Get the ownedResources Collection
     *
     * @return java.util.Set<ru.cti.oss.cbe.resource.Resource>
     */
    @javax.persistence.OneToMany(mappedBy = "owner", fetch = javax.persistence.FetchType.LAZY, cascade = { CascadeType.MERGE,
            CascadeType.REFRESH, CascadeType.REMOVE })
    public java.util.Set < ru.cti.oss.cbe.resource.Resource > getOwnedResources() {
        return this.ownedResources;
    }
    
    /**
     * Set the ownedResources
     *
     * @param ownedResources
     */
    public void setOwnedResources(java.util.Set < ru.cti.oss.cbe.resource.Resource > ownedResources) {
        this.ownedResources = ownedResources;
    }
    
    /**
     * Add to ownedResources
     *
     * @param resource
     */
    
    public void addToOwnedResources(ru.cti.oss.cbe.resource.Resource resource) {
        if (resource == null)
            return;
        this.getOwnedResources().add(resource);
        resource.setOwner(this);
    }
    
    /**
     * Remove from ownedResources
     *
     * @param resource
     */
    
    public void removeFromOwnedResources(ru.cti.oss.cbe.resource.Resource resource) {
        if (resource == null)
            return;
        this.getOwnedResources().remove(resource);
        resource.setOwner(null);
    }
    
    // -------- Manageable Attribute Display -----------
    
    /**
     * Get the partyLabel
     *
     * @return java.lang.String
     */
    @javax.persistence.Transient
    public java.lang.String getPartyLabel() {
        return this.partyLabel;
    }
    
    /**
     * Set the partyLabel
     *
     * @param partyLabel
     */
    public void setPartyLabel(java.lang.String partyLabel) {
        this.partyLabel = partyLabel;
    }
    
    // -------- Common Methods -----------
    
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof PartyRole)) {
            return false;
        }
        final PartyRole that = (PartyRole) object;
        if (this.getId() == null || that.getId() == null || !this.getId().equals(that.getId())) {
            return false;
        }
        return true;
    }
    
    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode() {
        int hashCode = 0;
        hashCode = 29 * hashCode + (getId() == null ? 0 : getId().hashCode());
        
        return hashCode;
    }
    
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("PartyRole(=");
        sb.append("name: ");
        sb.append(getName());
        sb.append(", validFor: ");
        if (getValidFor() != null)
            sb.append(getValidFor().toString());
        else
            sb.append("null");
        sb.append(", id: ");
        sb.append(getId());
        sb.append(")");
        return sb.toString();
    }
    
    /**
     * @see java.lang.Comparable#compareTo(T)
     */
    public int compareTo(PartyRole o) {
        int cmp = 0;
        if (this.getId() != null) {
            cmp = this.getId().compareTo(o.getId());
        } else {
            if (this.getName() != null) {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(o.getName()));
            }
        }
        return cmp;
    }
}