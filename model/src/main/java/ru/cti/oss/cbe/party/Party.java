// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EntityEmbeddable.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.cbe.party;

import org.hibernate.annotations.Index;

/**
 * Autogenerated POJO EJB class for Party containing the
 * bulk of the entity implementation.
 *
 * This is autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 * 
 *
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "PARTY")
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)
@javax.persistence.NamedQueries( { @javax.persistence.NamedQuery(name = "Party.findAll", query = "select party from Party AS party"),
        @javax.persistence.NamedQuery(name = "Party.findByExternalId", query = "from Party as party where party.externalId = :externalId") })
public class Party implements java.io.Serializable, Comparable < Party >
{
    
    private static final long serialVersionUID = 7604195965974897436L;
    
    // ----------- Attribute Definitions ------------
    
    private java.lang.String name;
    private java.lang.String externalId;
    private java.lang.Long id;
    
    // --------- Relationship Definitions -----------
    
    private java.util.Set < ru.cti.oss.cbe.party.PartyRole > partyRoles = new java.util.TreeSet < ru.cti.oss.cbe.party.PartyRole >();
    
    // ---- Manageable Display Attributes (Transient) -----
    
    private java.util.Collection < java.lang.String > partyRolesLabels; // Manageable display attribute
    
    // --------------- Constructors -----------------
    
    /**
     * Default empty constructor
     */
    public Party() {
    }
    
    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by
     * the parameters.
     *
     * @param name Value for the name property
     * @param externalId Value for the externalId property
     */
    public Party(java.lang.String name, java.lang.String externalId) {
        setName(name);
        setExternalId(externalId);
    }
    
    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param name Value for the name property
     * @param externalId Value for the externalId property
     * @param partyRoles Value for the partyRoles relation
     */
    public Party(java.lang.String name, java.lang.String externalId, java.util.Set < ru.cti.oss.cbe.party.PartyRole > partyRoles) {
        setName(name);
        setExternalId(externalId);
        
        setPartyRoles(partyRoles);
    }
    
    // -------- Attribute Accessors ----------
    
    /**
     * Get the name property.
     * 
     * @return java.lang.String The value of name
     */
    @javax.persistence.Column(name = "NAME", nullable = false, insertable = true, updatable = true)
    @Index(name = "name_index")
    public java.lang.String getName() {
        return name;
    }
    
    /**
     * Set the name property.
     * @param value the new value
     */
    public void setName(java.lang.String value) {
        this.name = value;
    }
    
    /**
     * Get the externalId property.
     * 
     * @return java.lang.String The value of externalId
     */
    @javax.persistence.Column(name = "EXTERNAL_ID", unique = true, nullable = false, insertable = true, updatable = true)
    public java.lang.String getExternalId() {
        return externalId;
    }
    
    /**
     * Set the externalId property.
     * @param value the new value
     */
    public void setExternalId(java.lang.String value) {
        this.externalId = value;
    }
    
    /**
     * Get the id property.
     * 
     * @return java.lang.Long The value of id
     */
    @javax.persistence.Id
    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)
    @javax.persistence.Column(name = "ID", nullable = false, insertable = true, updatable = true)
    @Index(name = "id_index")
    public java.lang.Long getId() {
        return id;
    }
    
    /**
     * Set the id property.
     * @param value the new value
     */
    public void setId(java.lang.Long value) {
        this.id = value;
    }
    
    // ------------- Relations ------------------
    
    /**
     * Get the partyRoles Collection
     *
     * @return java.util.Set<ru.cti.oss.cbe.party.PartyRole>
     */
    @javax.persistence.OneToMany(mappedBy = "party", fetch = javax.persistence.FetchType.LAZY)
    public java.util.Set < ru.cti.oss.cbe.party.PartyRole > getPartyRoles() {
        return this.partyRoles;
    }
    
    /**
     * Set the partyRoles
     *
     * @param partyRoles
     */
    public void setPartyRoles(java.util.Set < ru.cti.oss.cbe.party.PartyRole > partyRoles) {
        this.partyRoles = partyRoles;
    }
    
    /**
     * Add to partyRoles
     *
     * @param partyRole
     */
    
    public void addToPartyRoles(ru.cti.oss.cbe.party.PartyRole partyRole) {
        if (partyRole == null)
            return;
        this.getPartyRoles().add(partyRole);
        partyRole.setParty(this);
    }
    
    /**
     * Remove from partyRoles
     *
     * @param partyRole
     */
    
    public void removeFromPartyRoles(ru.cti.oss.cbe.party.PartyRole partyRole) {
        if (partyRole == null)
            return;
        this.getPartyRoles().remove(partyRole);
        partyRole.setParty(null);
    }
    
    // -------- Manageable Attribute Display -----------
    
    /**
     * Get the partyRolesLabels
     *
     * @return java.util.Collection<java.lang.String>
     */
    @javax.persistence.Transient
    public java.util.Collection < java.lang.String > getPartyRolesLabels() {
        return this.partyRolesLabels;
    }
    
    /**
     * Set the partyRolesLabels
     *
     * @param partyRolesLabels
     */
    public void setPartyRolesLabels(java.util.Collection < java.lang.String > partyRolesLabels) {
        this.partyRolesLabels = partyRolesLabels;
    }
    
    // -------- Common Methods -----------
    
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof Party)) {
            return false;
        }
        final Party that = (Party) object;
        if (this.getId() == null || that.getId() == null || !this.getId().equals(that.getId())) {
            return false;
        }
        return true;
    }
    
    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode() {
        int hashCode = 0;
        hashCode = 29 * hashCode + (getId() == null ? 0 : getId().hashCode());
        
        return hashCode;
    }
    
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Party(=");
        sb.append("name: ");
        sb.append(getName());
        sb.append(", externalId: ");
        sb.append(getExternalId());
        sb.append(", id: ");
        sb.append(getId());
        sb.append(")");
        return sb.toString();
    }
    
    /**
     * @see java.lang.Comparable#compareTo(T)
     */
    public int compareTo(Party o) {
        int cmp = 0;
        if (this.getId() != null) {
            cmp = this.getId().compareTo(o.getId());
        } else {
            if (this.getName() != null) {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(o.getName()));
            }
            if (this.getExternalId() != null) {
                cmp = (cmp != 0 ? cmp : this.getExternalId().compareTo(o.getExternalId()));
            }
        }
        return cmp;
    }
}