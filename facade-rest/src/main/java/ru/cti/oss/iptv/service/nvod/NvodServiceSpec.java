// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EntityEmbeddable.vsl in andromda-ejb3-cartridge.
//
package ru.cti.oss.iptv.service.nvod;

import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;

/**
 * Autogenerated POJO EJB class for NvodServiceSpec containing the
 * bulk of the entity implementation.
 *
 * This is autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 * 
 *
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "NVOD_SERVICE_SPEC")
@org.hibernate.annotations.BatchSize(size=20)
@javax.persistence.NamedQueries({	
	
	// CasBean
	@javax.persistence.NamedQuery(name = "NvodServiceSpec.findByRtspAssetName", 
		query = "SELECT DISTINCT nss.id FROM NvodServiceSpec nss " +
   				"INNER JOIN nss.movieCategories movieCategory " +
   				"INNER JOIN movieCategory.movies movie " +
   				"LEFT OUTER JOIN movie.mediaSources ms " +
   				"LEFT OUTER JOIN movie.episodes episode " +
   				"LEFT OUTER JOIN episode.mediaSources ems " +
   				"WHERE " +
   				"  nss.status = 'ACTIVE' " +
   				"  AND " +
   				"  ( " +
   				"    (ms MEMBER OF MediaAsset AND ms.fileName = :fileName AND ms.protocol = 'rtsp') " +
   				"    OR " +
   				"    (ems MEMBER OF MediaAsset AND ems.fileName = :fileName AND ems.protocol = 'rtsp') " +
   				"  )"),

	// CasBean
	@javax.persistence.NamedQuery(name = "NvodServiceSpec.findByIds", 
		query = "SELECT nss FROM NvodServiceSpec nss " +
   				"WHERE nss.id IN (:ids)"),

   				
   	@javax.persistence.NamedQuery(name = "NvodServiceSpec.findAll", 
   		query = "SELECT nvodServiceSpec FROM NvodServiceSpec nvodServiceSpec")
	
})
public class NvodServiceSpec
    extends ru.cti.oss.cbe.service.ServiceSpecification
    implements java.io.Serializable
{

    private static final long serialVersionUID = 1008225540653717781L;

    // --------- Relationship Definitions -----------

    private java.util.Set<ru.cti.oss.iptv.resource.logical.MovieCategory> movieCategories = new java.util.TreeSet<ru.cti.oss.iptv.resource.logical.MovieCategory>();

    // ---- Manageable Display Attributes (Transient) -----


    // --------------- Constructors -----------------

    /**
     * Default empty constructor
     */
    public NvodServiceSpec() {}

    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by
     * the parameters.
     *
     * @param name Value for the name property
     * @param description Value for the description property
     * @param status Value for the status property
     * @param externalId Value for the externalId property
     * @param logo Value for the logo property
     */
    public NvodServiceSpec(java.lang.String name, java.lang.String description, ru.cti.oss.cbe.service.ServiceStatus status, java.lang.Long externalId, ru.cti.oss.iptv.Image logo)
    {
        super(name, description, status, externalId, logo);
        setName(name);
        setDescription(description);
        setStatus(status);
        setExternalId(externalId);
        setLogo(logo);
    }

    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param name Value for the name property
     * @param description Value for the description property
     * @param status Value for the status property
     * @param externalId Value for the externalId property
     * @param logo Value for the logo property
     * @param movieCategories Value for the movieCategories relation
     */
    public NvodServiceSpec(java.lang.String name, java.lang.String description, ru.cti.oss.cbe.service.ServiceStatus status, java.lang.Long externalId, ru.cti.oss.iptv.Image logo, java.util.Set<ru.cti.oss.iptv.resource.logical.MovieCategory> movieCategories)
    {
        setName(name);
        setDescription(description);
        setStatus(status);
        setExternalId(externalId);
        setLogo(logo);

        setMovieCategories(movieCategories);
    }


    // ------------- Relations ------------------

    /**
     * Get the movieCategories Collection
     *
     * @return java.util.Set<ru.cti.oss.iptv.resource.logical.MovieCategory>
     */
    @javax.persistence.OneToMany(fetch = javax.persistence.FetchType.LAZY)
    @JoinTable(name="NVOD_SS_MOVIE_C",
    		joinColumns = @JoinColumn(name="NSS_ID"),
    		inverseJoinColumns = @JoinColumn(name="MC_ID")
    )
    public java.util.Set<ru.cti.oss.iptv.resource.logical.MovieCategory> getMovieCategories()
    {
        return this.movieCategories;
    }

    /**
     * Set the movieCategories
     *
     * @param movieCategories
     */
    public void setMovieCategories (java.util.Set<ru.cti.oss.iptv.resource.logical.MovieCategory> movieCategories)
    {
        this.movieCategories = movieCategories;
    }

    /**
     * Add to movieCategories
     *
     * @param movieCategory
     */

    public void addToMovieCategories (ru.cti.oss.iptv.resource.logical.MovieCategory movieCategory)
    {
        if (movieCategory == null ) return;
        this.getMovieCategories().add(movieCategory);
    }

    /**
     * Remove from movieCategories
     *
     * @param movieCategory
     */

    public void removeFromMovieCategories (ru.cti.oss.iptv.resource.logical.MovieCategory movieCategory)
    {
        if (movieCategory == null ) return;
        this.getMovieCategories().remove(movieCategory);
    }
    
    /*
     * (non-Javadoc)
     * @see ru.cti.oss.cbe.service.ServiceSpecification#countTypeSpecs()
     */
    @Override
    public int countTypeSpecs() {
    	if (movieCategories != null) {
    		return movieCategories.size();
    	}
    	return 0;
    }

    // -------- Common Methods -----------

    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof NvodServiceSpec))
        {
            return false;
        }
        final NvodServiceSpec that = (NvodServiceSpec)object;
        if (this.getId() == null || that.getId() == null || !this.getId().equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode()
    {
        int hashCode = super.hashCode();
        hashCode = 29 * hashCode + (getId() == null ? 0 : getId().hashCode());

        return hashCode;
    }

    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString()
    {
        return super.toString();
    }

}